# -*- mode: Snakemake -*-
# Sequence Alignment: BLAT

rule align:
  input:
    seq = PROC_DIR + "/analysis_data/{sample}.{read}.consol.fasta",
    genome = config["Ref_Genome_Path"]
  output:
    temp(PROC_DIR + "/analysis_data/{sample}.{read}.psl")
  params:
    config["BLATparams"]
  log:
    PROC_DIR + "/logs/{sample}.{read}.blat.log"
  resources:
    mem_mb = lambda wildcards, attempt: attempt * config["alignMB"]
  shell:
    """
    if [[ $(cat {input.seq} | wc -l) -eq 0 ]]
        then
            touch {output}
            echo 'Empty input sequences for {input.seq}.' > {log} 2>&1
        else
            blat {input.genome} {input.seq} {output} \
                {params} > {log} 2>&1
    fi
    """

rule compress_align:
  input: PROC_DIR + "/analysis_data/{sample}.{read}.psl"
  output: temp(PROC_DIR + "/analysis_data/{sample}.{read}.psl.gz")
  shell: "gzip {input}"

rule generate_2bit:
  input: PROC_DIR + "/" + RUN + ".config.yml"
  output: temp(config["Ref_Genome_Path"])
  params: config["Ref_Genome"]
  shell:
    "Rscript {CODE_DIR}/generate_2bit_genome.R {params} {output}"

rule construct_viral_ref:
  input: PROC_DIR + "/" + RUN + ".config.yml"
  output: VIRAL_DIR + "/chiva." + RUN + ".viral.seqs.fasta"
  params: 
    dir=VIRAL_DIR,
    tool=CODE_DIR + "/concat_seq_files.R"
  log:
    PROC_DIR + "/logs/" + RUN + "viral.ref.log"
  shell:
    "Rscript {params.tool} {params.dir} {output} > {log} 2>&1"
