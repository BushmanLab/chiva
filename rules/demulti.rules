# -*- mode: Snakemake -*-
# Demultiplexing Rules

rule demultiplex:
  input:
    sampleInfo=ancient(config["Sample_Info"]),
    R1=R1_SEQ_INPUT,
    R2=R2_SEQ_INPUT,
    I1=I1_SEQ_INPUT
  output:
    expand(PROC_DIR + "/analysis_data/{sample}.{type}.fastq.gz", sample=SAMPLES, type=TYPES)
  params:
    configFile=PROC_DIR + "/" + RUN + ".config.yml",
    proc=PROC_DIR,
    tool=CODE_DIR + "/demulti.R",
    bc1Len=config["barcode1Length"],
    bc2Len=config["barcode2Length"],
    bc1=config["barcode1"],
    bc2=config["barcode2"],
    bc1Mis=config["bc1Mismatch"],
    bc2Mis=config["bc2Mismatch"],
    maxN=config["maxNcount"]
  log:
    PROC_DIR + "/logs/demultiplex." + RUN + ".log"
  threads: 
    demulti_cores
  resources:
    mem_mb=lambda wildcards, attempt: attempt * config["demultiMB"]
  shell:
    """
    Rscript {params.tool} -m {input.sampleInfo} \
      --read1 {input.R1} --read2 {input.R2} --idx1 {input.I1} \
      --bc1 {params.bc1} --bc1Len {params.bc1Len} --bc1Mis {params.bc1Mis} \
      --bc2 {params.bc2} --bc2Len {params.bc2Len} --bc2Mis {params.bc2Mis} \
      --maxN {params.maxN} -o {params.proc}/analysis_data \
      -c {threads} --compress > {log} 2>&1
    """
